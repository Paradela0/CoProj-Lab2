-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axis_gemv_fixed_axis_gemv_fixed_Pipeline_VITIS_LOOP_32_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_TVALID : IN STD_LOGIC;
    strm_out_TREADY : IN STD_LOGIC;
    strm_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_TREADY : OUT STD_LOGIC;
    strm_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    strm_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    strm_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_TVALID : OUT STD_LOGIC;
    strm_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    strm_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    strm_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    i_0260 : IN STD_LOGIC_VECTOR (9 downto 0);
    localmem_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    localmem_ce0 : OUT STD_LOGIC;
    localmem_q0 : IN STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of axis_gemv_fixed_axis_gemv_fixed_Pipeline_VITIS_LOOP_32_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_0_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_0_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln44_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_265_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln44_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmpi_last_fu_154_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal acc : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    signal strm_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal strm_out_TDATA_blk_n : STD_LOGIC;
    signal tmpi_last_reg_246 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmpi_last_reg_246_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmpi_last_reg_246_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmpi_data_fu_158_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmpi_data_reg_251 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmpi_data_reg_251_pp0_iter1_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln41_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_261 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_261_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_261_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_265_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal localmem_load_reg_269 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln39_fu_138_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln39_reg_274 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_phi_mux_empty_13_phi_fu_132_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal add_ln42_fu_210_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_13_reg_129 : STD_LOGIC_VECTOR (58 downto 0);
    signal sext_ln41_fu_217_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal zext_ln37_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_76 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal i_2_fu_179_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal localmem_ce0_local : STD_LOGIC;
    signal sext_ln42_fu_207_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_277 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component axis_gemv_fixed_mul_25s_25s_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component axis_gemv_fixed_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_25s_25s_50_1_1_U7 : component axis_gemv_fixed_mul_25s_25s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => localmem_load_reg_269,
        din1 => tmpi_data_reg_251_pp0_iter1_reg,
        dout => mul_ln39_fu_138_p2);

    flow_control_loop_pipe_sequential_init_U : component axis_gemv_fixed_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_277)) then 
                    i_fu_76 <= ap_const_lv10_0_2;
                elsif (((icmp_ln44_fu_173_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    i_fu_76 <= i_2_fu_179_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_76 <= ap_const_lv10_0_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                acc <= ap_phi_mux_empty_13_phi_fu_132_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln41_reg_261 <= icmp_ln41_fu_167_p2;
                icmp_ln41_reg_261_pp0_iter1_reg <= icmp_ln41_reg_261;
                icmp_ln44_reg_265 <= icmp_ln44_fu_173_p2;
                icmp_ln44_reg_265_pp0_iter1_reg <= icmp_ln44_reg_265;
                localmem_load_reg_269 <= localmem_q0;
                tmpi_data_reg_251 <= tmpi_data_fu_158_p1;
                tmpi_data_reg_251_pp0_iter1_reg <= tmpi_data_reg_251;
                tmpi_last_reg_246 <= strm_in_TLAST;
                tmpi_last_reg_246_pp0_iter1_reg <= tmpi_last_reg_246;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln41_reg_261_pp0_iter2_reg <= icmp_ln41_reg_261_pp0_iter1_reg;
                icmp_ln44_reg_265_pp0_iter2_reg <= icmp_ln44_reg_265_pp0_iter1_reg;
                mul_ln39_reg_274 <= mul_ln39_fu_138_p2;
                tmpi_last_reg_246_pp0_iter2_reg <= tmpi_last_reg_246_pp0_iter1_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln42_fu_210_p2 <= std_logic_vector(unsigned(acc) + unsigned(sext_ln42_fu_207_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state1_pp0_stage0_iter0, ap_block_state4_pp0_stage0_iter3, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state1_pp0_stage0_iter0, ap_block_state4_pp0_stage0_iter3, ap_block_state4_io, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3))) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state1_pp0_stage0_iter0, ap_block_state4_pp0_stage0_iter3, ap_block_state4_io, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3))) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(strm_in_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (strm_in_TVALID = ap_const_logic_0);
    end process;


    ap_block_state4_io_assign_proc : process(strm_out_TREADY, icmp_ln44_reg_265_pp0_iter2_reg)
    begin
                ap_block_state4_io <= ((icmp_ln44_reg_265_pp0_iter2_reg = ap_const_lv1_1) and (strm_out_TREADY = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(strm_out_TREADY, icmp_ln44_reg_265_pp0_iter2_reg)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((icmp_ln44_reg_265_pp0_iter2_reg = ap_const_lv1_1) and (strm_out_TREADY = ap_const_logic_0));
    end process;


    ap_condition_277_assign_proc : process(icmp_ln44_fu_173_p2, tmpi_last_fu_154_p1, ap_start_int)
    begin
                ap_condition_277 <= ((tmpi_last_fu_154_p1 = ap_const_lv1_0) and (icmp_ln44_fu_173_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln44_fu_173_p2, tmpi_last_fu_154_p1, ap_start_int)
    begin
        if (((tmpi_last_fu_154_p1 = ap_const_lv1_1) and (icmp_ln44_fu_173_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_empty_13_phi_fu_132_p4_assign_proc : process(icmp_ln41_reg_261_pp0_iter2_reg, add_ln42_fu_210_p2, ap_phi_reg_pp0_iter3_empty_13_reg_129, sext_ln41_fu_217_p1)
    begin
        if ((icmp_ln41_reg_261_pp0_iter2_reg = ap_const_lv1_1)) then 
            ap_phi_mux_empty_13_phi_fu_132_p4 <= sext_ln41_fu_217_p1;
        elsif ((icmp_ln41_reg_261_pp0_iter2_reg = ap_const_lv1_0)) then 
            ap_phi_mux_empty_13_phi_fu_132_p4 <= add_ln42_fu_210_p2;
        else 
            ap_phi_mux_empty_13_phi_fu_132_p4 <= ap_phi_reg_pp0_iter3_empty_13_reg_129;
        end if; 
    end process;

    ap_phi_reg_pp0_iter3_empty_13_reg_129 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_76, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv10_0_1;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_76;
        end if; 
    end process;

    i_2_fu_179_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv10_1));
    icmp_ln41_fu_167_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv10_0) else "0";
    icmp_ln44_fu_173_p2 <= "1" when (ap_sig_allocacmp_i_1 = i_0260) else "0";
    localmem_address0 <= zext_ln37_fu_162_p1(9 - 1 downto 0);
    localmem_ce0 <= localmem_ce0_local;

    localmem_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            localmem_ce0_local <= ap_const_logic_1;
        else 
            localmem_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln41_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln39_reg_274),59));

        sext_ln42_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln39_reg_274),59));


    strm_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, strm_in_TVALID, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_TDATA_blk_n <= strm_in_TVALID;
        else 
            strm_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_TREADY <= ap_const_logic_1;
        else 
            strm_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    strm_out_TDATA <= ap_phi_mux_empty_13_phi_fu_132_p4(51 downto 20);

    strm_out_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, strm_out_TREADY, icmp_ln44_reg_265_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln44_reg_265_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            strm_out_TDATA_blk_n <= strm_out_TREADY;
        else 
            strm_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_out_TKEEP <= ap_const_lv4_F;
    strm_out_TLAST <= tmpi_last_reg_246_pp0_iter2_reg;
    strm_out_TSTRB <= ap_const_lv4_F;

    strm_out_TVALID_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln44_reg_265_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln44_reg_265_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            strm_out_TVALID <= ap_const_logic_1;
        else 
            strm_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmpi_data_fu_158_p1 <= strm_in_TDATA(25 - 1 downto 0);
    tmpi_last_fu_154_p1 <= strm_in_TLAST;
    zext_ln37_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
end behav;
