// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module axis_gemv_fixed_axis_gemv_fixed_Pipeline_VITIS_LOOP_32_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_TVALID,
        strm_out_TREADY,
        strm_in_TDATA,
        strm_in_TREADY,
        strm_in_TKEEP,
        strm_in_TSTRB,
        strm_in_TLAST,
        strm_out_TDATA,
        strm_out_TVALID,
        strm_out_TKEEP,
        strm_out_TSTRB,
        strm_out_TLAST,
        i_0260,
        localmem_address0,
        localmem_ce0,
        localmem_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   strm_in_TVALID;
input   strm_out_TREADY;
input  [31:0] strm_in_TDATA;
output   strm_in_TREADY;
input  [3:0] strm_in_TKEEP;
input  [3:0] strm_in_TSTRB;
input  [0:0] strm_in_TLAST;
output  [31:0] strm_out_TDATA;
output   strm_out_TVALID;
output  [3:0] strm_out_TKEEP;
output  [3:0] strm_out_TSTRB;
output  [0:0] strm_out_TLAST;
input  [9:0] i_0260;
output  [8:0] localmem_address0;
output   localmem_ce0;
input  [24:0] localmem_q0;

reg ap_idle;
reg strm_in_TREADY;
reg strm_out_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln44_reg_265;
reg   [0:0] icmp_ln44_reg_265_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln44_fu_173_p2;
wire   [0:0] tmpi_last_fu_154_p1;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [58:0] acc;
reg    strm_in_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    strm_out_TDATA_blk_n;
reg   [0:0] tmpi_last_reg_246;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmpi_last_reg_246_pp0_iter1_reg;
reg   [0:0] tmpi_last_reg_246_pp0_iter2_reg;
wire   [24:0] tmpi_data_fu_158_p1;
reg   [24:0] tmpi_data_reg_251;
reg  signed [24:0] tmpi_data_reg_251_pp0_iter1_reg;
wire   [0:0] icmp_ln41_fu_167_p2;
reg   [0:0] icmp_ln41_reg_261;
reg   [0:0] icmp_ln41_reg_261_pp0_iter1_reg;
reg   [0:0] icmp_ln41_reg_261_pp0_iter2_reg;
reg   [0:0] icmp_ln44_reg_265_pp0_iter1_reg;
reg  signed [24:0] localmem_load_reg_269;
wire  signed [49:0] mul_ln39_fu_138_p2;
reg  signed [49:0] mul_ln39_reg_274;
reg   [58:0] ap_phi_mux_empty_13_phi_fu_132_p4;
wire   [58:0] add_ln42_fu_210_p2;
wire   [58:0] ap_phi_reg_pp0_iter3_empty_13_reg_129;
wire  signed [58:0] sext_ln41_fu_217_p1;
wire   [63:0] zext_ln37_fu_162_p1;
reg   [9:0] i_fu_76;
wire   [9:0] i_2_fu_179_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
reg    localmem_ce0_local;
wire  signed [58:0] sext_ln42_fu_207_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_277;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 acc = 59'd0;
#0 i_fu_76 = 10'd0;
#0 ap_done_reg = 1'b0;
end

axis_gemv_fixed_mul_25s_25s_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25s_25s_50_1_1_U7(
    .din0(localmem_load_reg_269),
    .din1(tmpi_data_reg_251_pp0_iter1_reg),
    .dout(mul_ln39_fu_138_p2)
);

axis_gemv_fixed_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_277)) begin
            i_fu_76 <= 10'd0;
        end else if (((icmp_ln44_fu_173_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            i_fu_76 <= i_2_fu_179_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        acc <= ap_phi_mux_empty_13_phi_fu_132_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln41_reg_261 <= icmp_ln41_fu_167_p2;
        icmp_ln41_reg_261_pp0_iter1_reg <= icmp_ln41_reg_261;
        icmp_ln44_reg_265 <= icmp_ln44_fu_173_p2;
        icmp_ln44_reg_265_pp0_iter1_reg <= icmp_ln44_reg_265;
        localmem_load_reg_269 <= localmem_q0;
        tmpi_data_reg_251 <= tmpi_data_fu_158_p1;
        tmpi_data_reg_251_pp0_iter1_reg <= tmpi_data_reg_251;
        tmpi_last_reg_246 <= strm_in_TLAST;
        tmpi_last_reg_246_pp0_iter1_reg <= tmpi_last_reg_246;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln41_reg_261_pp0_iter2_reg <= icmp_ln41_reg_261_pp0_iter1_reg;
        icmp_ln44_reg_265_pp0_iter2_reg <= icmp_ln44_reg_265_pp0_iter1_reg;
        mul_ln39_reg_274 <= mul_ln39_fu_138_p2;
        tmpi_last_reg_246_pp0_iter2_reg <= tmpi_last_reg_246_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((tmpi_last_fu_154_p1 == 1'd1) & (icmp_ln44_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln41_reg_261_pp0_iter2_reg == 1'd1)) begin
        ap_phi_mux_empty_13_phi_fu_132_p4 = sext_ln41_fu_217_p1;
    end else if ((icmp_ln41_reg_261_pp0_iter2_reg == 1'd0)) begin
        ap_phi_mux_empty_13_phi_fu_132_p4 = add_ln42_fu_210_p2;
    end else begin
        ap_phi_mux_empty_13_phi_fu_132_p4 = ap_phi_reg_pp0_iter3_empty_13_reg_129;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 10'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        localmem_ce0_local = 1'b1;
    end else begin
        localmem_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_TDATA_blk_n = strm_in_TVALID;
    end else begin
        strm_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_TREADY = 1'b1;
    end else begin
        strm_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln44_reg_265_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        strm_out_TDATA_blk_n = strm_out_TREADY;
    end else begin
        strm_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln44_reg_265_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        strm_out_TVALID = 1'b1;
    end else begin
        strm_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_210_p2 = ($signed(acc) + $signed(sext_ln42_fu_207_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (strm_in_TVALID == 1'b0);
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln44_reg_265_pp0_iter2_reg == 1'd1) & (strm_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln44_reg_265_pp0_iter2_reg == 1'd1) & (strm_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_277 = ((tmpi_last_fu_154_p1 == 1'd0) & (icmp_ln44_fu_173_p2 == 1'd1) & (ap_start_int == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter3_empty_13_reg_129 = 'bx;

assign ap_ready = ap_ready_sig;

assign i_2_fu_179_p2 = (ap_sig_allocacmp_i_1 + 10'd1);

assign icmp_ln41_fu_167_p2 = ((ap_sig_allocacmp_i_1 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_173_p2 = ((ap_sig_allocacmp_i_1 == i_0260) ? 1'b1 : 1'b0);

assign localmem_address0 = zext_ln37_fu_162_p1;

assign localmem_ce0 = localmem_ce0_local;

assign sext_ln41_fu_217_p1 = mul_ln39_reg_274;

assign sext_ln42_fu_207_p1 = mul_ln39_reg_274;

assign strm_out_TDATA = {{ap_phi_mux_empty_13_phi_fu_132_p4[51:20]}};

assign strm_out_TKEEP = 4'd15;

assign strm_out_TLAST = tmpi_last_reg_246_pp0_iter2_reg;

assign strm_out_TSTRB = 4'd15;

assign tmpi_data_fu_158_p1 = strm_in_TDATA[24:0];

assign tmpi_last_fu_154_p1 = strm_in_TLAST;

assign zext_ln37_fu_162_p1 = ap_sig_allocacmp_i_1;

endmodule //axis_gemv_fixed_axis_gemv_fixed_Pipeline_VITIS_LOOP_32_2
