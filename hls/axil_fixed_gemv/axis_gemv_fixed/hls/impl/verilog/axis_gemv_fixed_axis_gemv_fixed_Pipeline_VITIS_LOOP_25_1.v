// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module axis_gemv_fixed_axis_gemv_fixed_Pipeline_VITIS_LOOP_25_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_TVALID,
        strm_in_TDATA,
        strm_in_TREADY,
        strm_in_TKEEP,
        strm_in_TSTRB,
        strm_in_TLAST,
        i_out,
        i_out_ap_vld,
        localmem_address0,
        localmem_ce0,
        localmem_we0,
        localmem_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   strm_in_TVALID;
input  [31:0] strm_in_TDATA;
output   strm_in_TREADY;
input  [3:0] strm_in_TKEEP;
input  [3:0] strm_in_TSTRB;
input  [0:0] strm_in_TLAST;
output  [8:0] i_out;
output   i_out_ap_vld;
output  [8:0] localmem_address0;
output   localmem_ce0;
output   localmem_we0;
output  [24:0] localmem_d0;
output  [0:0] ap_return;

reg ap_idle;
reg strm_in_TREADY;
reg i_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln25_fu_120_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmpi_last_fu_141_p1;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    strm_in_TDATA_blk_n;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_99_p4;
wire   [63:0] zext_ln25_fu_132_p1;
reg   [9:0] i_fu_60;
wire   [9:0] add_ln25_fu_126_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i_3;
reg    localmem_we0_local;
wire   [24:0] tmpi_data_fu_145_p1;
reg    localmem_ce0_local;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_fu_60 = 10'd0;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

axis_gemv_fixed_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_99_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((tmpi_last_fu_141_p1 == 1'd0) & (icmp_ln25_fu_120_p2 == 1'd0))) begin
            i_fu_60 <= add_ln25_fu_126_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 10'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & ((tmpi_last_fu_141_p1 == 1'd1) | (icmp_ln25_fu_120_p2 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((tmpi_last_fu_141_p1 == 1'd1) & (icmp_ln25_fu_120_p2 == 1'd0))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_99_p4 = 1'd0;
        end else if ((icmp_ln25_fu_120_p2 == 1'd1)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_99_p4 = 1'd1;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_99_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_99_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_99_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_3 = 10'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_60;
    end
end

always @ (*) begin
    if ((((ap_loop_exit_ready == 1'b1) & (tmpi_last_fu_141_p1 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln25_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln25_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_out_ap_vld = 1'b1;
    end else begin
        i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        localmem_ce0_local = 1'b1;
    end else begin
        localmem_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln25_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        localmem_we0_local = 1'b1;
    end else begin
        localmem_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        strm_in_TDATA_blk_n = strm_in_TVALID;
    end else begin
        strm_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln25_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        strm_in_TREADY = 1'b1;
    end else begin
        strm_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_126_p2 = (ap_sig_allocacmp_i_3 + 10'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln25_fu_120_p2 == 1'd0) & (strm_in_TVALID == 1'b0)));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_out = ap_sig_allocacmp_i_3[8:0];

assign icmp_ln25_fu_120_p2 = ((ap_sig_allocacmp_i_3 == 10'd512) ? 1'b1 : 1'b0);

assign localmem_address0 = zext_ln25_fu_132_p1;

assign localmem_ce0 = localmem_ce0_local;

assign localmem_d0 = tmpi_data_fu_145_p1;

assign localmem_we0 = localmem_we0_local;

assign tmpi_data_fu_145_p1 = strm_in_TDATA[24:0];

assign tmpi_last_fu_141_p1 = strm_in_TLAST;

assign zext_ln25_fu_132_p1 = ap_sig_allocacmp_i_3;

endmodule //axis_gemv_fixed_axis_gemv_fixed_Pipeline_VITIS_LOOP_25_1
